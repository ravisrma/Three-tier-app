name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy:
        description: "Set to true to destroy resources."
        required: false
        default: "false"

permissions:
  contents: read
  pull-requests: write

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build:
    if: ${{ github.event.inputs.destroy != 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      # Set up NodeJS 
    - name: Set up NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    # Install NodeJS dependencies
    - name: Install NodeJS dependencies
      run: npm install
      working-directory: ./student-teacher-app

    # SonarQube Analysis
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v4
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    # Build Frontend Docker image
    - name: Build Frontend Docker image
      run: |
        docker build -t frontend:${{ github.sha }} -f ./student-teacher-app/Dockerfile-Frontend ./student-teacher-app
        docker tag frontend:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
    
    # Build Backend Docker image
    - name: Build Backend Docker image
      run: |
        docker build -t backend:${{ github.sha }} -f ./backend/Dockerfile-Backend ./backend
        docker tag backend:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
    
    # Build Database Docker image
    - name: Build Database Docker image
      run: |
        docker build -t database:${{ github.sha }} -f ./database/Dockerfile-Database ./database
        docker tag database:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/database:latest
    
    # Trivy Scan
    - name: Trivy Scan Frontend
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image frontend:${{ github.sha}}
    
    - name: Trivy Scan Backend
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image backend:${{ github.sha}}

    - name: Trivy Scan Database
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image database:${{ github.sha}}

    # Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Push image to DockerHub
    - name: Push Frontend image to DockerHub
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
    
    - name: Push Backend image to DockerHub
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

    - name: Push Database image to DockerHub
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/database:latest

  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Git checkout
        uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4.0.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - uses: actions/github-script@v7.0.1
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.MY_GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
      
      - name: Install kubectl
        run: |
          sudo apt-get install kubectl -y

      - name: Update kubeconfig
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name eks-cluster
      
      - name: Wait for resources to be created
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: sleep 30

      - name: Deploy ELK Stack
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: | 
          cd elk
          kubectl config view
          kubectl apply -f . --validate=false
    
      - name: Verify kubectl configuration
        run: | 
          sleep 30
          kubectl get svc -n elk

  destroy:
    runs-on: ubuntu-latest
    needs: [terraform]
    if: ${{ github.event.inputs.destroy == 'true' }}
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Git checkout
        uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4.0.3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2

      - name: Terraform Init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false

  notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: [build, terraform]
    if: ${{ github.base_ref == 'main' && github.event_name == 'pull_request' }}
    steps:
    - name: Notify on Success
      if: success()
      uses: abinoda/slack-action@master
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      with:
        args: '{\"channel\":\"${{ secrets.SLACK_PR_CHANNEL_ID }}\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\":tada: *Pull Request:* ${{ github.event.pull_request.title }} :tada:\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Contributor :* ${{ github.event.pull_request.user.login }}\n*Request State:* ${{ github.event.pull_request.state }}\n*Status:* Success :white_check_mark:\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ github.event.pull_request.html_url }}|View Pull Request>\"}}]}'

    - name: Notify on Failure
      if: failure()
      uses: abinoda/slack-action@master
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      with:
        args: '{\"channel\":\"${{ secrets.SLACK_PR_CHANNEL_ID }}\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\":x: *Pull Request:* ${{ github.event.pull_request.title }} :x:\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Contributor :* ${{ github.event.pull_request.user.login }}\n*Request State:* ${{ github.event.pull_request.state }}\n*Status:* Failure :x:\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ github.event.pull_request.html_url }}|View Pull Request>\"}}]}'