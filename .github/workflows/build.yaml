name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      # Set up NodeJS 
    - name: Set up NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    # Install NodeJS dependencies
    - name: Install NodeJS dependencies
      run: npm install
      working-directory: ./student-teacher-app

    # SonarQube Analysis
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v4
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    # Build Frontend Docker image
    - name: Build Frontend Docker image
      run: |
        docker build -t frontend:${{ github.sha }} -f ./student-teacher-app/Dockerfile-Frontend ./student-teacher-app
        docker tag frontend:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
    
    # Build Backend Docker image
    - name: Build Backend Docker image
      run: |
        docker build -t backend:${{ github.sha }} -f ./backend/Dockerfile-Backend ./backend
        docker tag backend:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
    
    # Build Database Docker image
    - name: Build Database Docker image
      run: |
        docker build -t database:${{ github.sha }} -f ./database/Dockerfile-Database ./database
        docker tag database:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/database:latest
    
    # Trivy Scan
    - name: Trivy Scan Frontend
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image frontend:${{ github.sha}}
    
    - name: Trivy Scan Backend
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image backend:${{ github.sha}}

    - name: Trivy Scan Database
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image database:${{ github.sha}}

    # Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Push image to DockerHub
    - name: Push Frontend image to DockerHub
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
    
    - name: Push Backend image to DockerHub
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

    - name: Push Database image to DockerHub
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/database:latest


  notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: 8398a7/action-slack@v3
      with:
        status: custom
        fields: workflow,job,commit,repo,ref,author,took
        custom_payload: |
          {
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
              text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always() # Pick up events even if the job fails or is canceled.