name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      # Set up NodeJS 
    - name: Set up NodeJS
      uses: actions/setup-node@v3
      with:
        node-version: '14'

    # Install NodeJS dependencies
    - name: Install NodeJS dependencies
      run: npm install
      working-directory: ./student-teacher-app

    # SonarQube Analysis
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v4
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    # Build Frontend Docker image
    - name: Build Frontend Docker image
      run: |
        docker build -t frontend:${{ github.sha }} -f ./student-teacher-app/Dockerfile-Frontend ./student-teacher-app
        docker tag frontend:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
    
    # Build Backend Docker image
    - name: Build Backend Docker image
      run: |
        docker build -t backend:${{ github.sha }} -f ./backend/Dockerfile-Backend ./backend
        docker tag backend:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest
    
    # Build Database Docker image
    - name: Build Database Docker image
      run: |
        docker build -t database:${{ github.sha }} -f ./database/Dockerfile-Database ./database
        docker tag database:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/database:latest
    
    # Trivy Scan
    - name: Trivy Scan Frontend
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image frontend:${{ github.sha}}
    
    - name: Trivy Scan Backend
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image backend:${{ github.sha}}

    - name: Trivy Scan Database
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image database:${{ github.sha}}

    # Log in to DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Push image to DockerHub
    - name: Push Frontend image to DockerHub
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
    
    - name: Push Backend image to DockerHub
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/backend:latest

    - name: Push Database image to DockerHub
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/database:latest

  # "notify" workflow for slack notification
  notify:

    name: Notify on Slack
    runs-on: ubuntu-latest
    # Only run this workflow when "build" workflow succeeds
    needs: [build]

    # Only run this workflow if it target is main branch on pull_request event
    if: ${{ github.base_ref == 'main' && github.event_name == 'pull_request' }}

    steps:

      - uses: abinoda/slack-action@v1.0.9
        env:
          # required
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          # custom message to send to slack
          args: '{\"channel\":\"${{ secrets.SLACK_PR_CHANNEL_ID }}\",\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Pull Request:* ${{ github.event.pull_request.title }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"*Contributor :* ${{ github.event.pull_request.user.login }}\n*Request State:* ${{ github.event.pull_request.state }}\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"<${{ github.event.pull_request.html_url }}|View Pull Request>\"}}]}' 
        
        # Pick up events even if the job is success.
        if: success()
